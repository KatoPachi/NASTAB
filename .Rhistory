region = names(gini[i]),
col = rgb(red = 1, blue = 1, green = (1-gini[i])),
fill = TRUE, add = TRUE)
}
gini <- rep(NA, length(state))
for(i in 1:length(state)){
gini.vec <- elec2008$Dem[elec2008$state == state[i]]
gini.state <- ineq(gini.vec, type = "Gini")
gini[i] <- gini.state
}
map(database = "state")
for(i in 1:length(state){
map(database = "state")
for(i in 1:length(state){
gini
gini[i]
for(i in 1:length(state)){
gini.vec <- elec2008$Dem[elec2008$state == state[i]]
gini.state <- ineq(gini.vec, type = "Gini")
gini[i] <- gini.state
names(gini[i]) <- state[i]
}
gini[i]
names(gini[i])
state <- unique(elec$state)
state
for(i in 1:length(state)){
gini.vec <- elec2008$Dem[elec2008$state == state[i]]
gini.state <- ineq(gini.vec, type = "Gini")
gini[i] <- gini.state
names(gini[i]) <- state[i]
}
names(gini[i])
(計算スペース)
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
(計算スペース)
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
# This is options to make pdf file. You should ignore
library(here)
knitr::opts_chunk$set(
message = FALSE,
warning = FALSE,
echo = TRUE,
cache = FALSE,
fig.pos = "h")
## データの読み込み
data <- read.csv("5_1_income.csv")
## データの一部から変数などを確認する
head(data)
## incomeの対数値をlogincomeという変数としてデータフレームに加える。
data$logincome <- log(data$income)
## logincomeとlincomeが等しいかを調べる。
data$logincome == data$lincome
## incomeの対数値をlogincomeという変数としてデータフレームに加える。
data$logyeduc <- log(data$yeduc)
## logincomeとlincomeが等しいかを調べる。
data$logyeduc == data$lyeduc
View(data)
## lyeducの指数をとった値をeducという変数としてデータフレームに加える。
data$educ <- exp(data$lyeduc)
head(data$educ)
##
head(c(data$educ,data$yeduc))
##
head(data$yeduc)
head(data$educ)
## 1つ目はyeducの値が9となる行だけ取り出すというやり方
sub1 <- data[data$yeduc == 9,]
## 2つ目はsubsetという関数を使うやり方
sub2 <- subset(data, subset = (yeduc == 9))
## 1つ目はyeducの値が11となる行だけ取り出すというやり方
sub1 <- data[data$yeduc == 11,]
## 2つ目はsubsetという関数を使うやり方
sub2 <- subset(data, subset = (yeduc == 11))
## 結果を確認
head(sub1)
head(sub2)
## 1 + 2と3は等しいだろうか。
1 + 2 == 3
## 1 + 1と3は異なるものだろうか。
1 + 1 != 3
## 1より2は大きいだろうか。また3は1以上(以下)だろうか。
1 < 2
3 >= 1
3 <= 1
## sub1とsub2は等しいだろうか
sub1 == sub2
sub1 = sub2
sub1 = sub2
## sub1とsub2の各要素は等しいだろうか
head(sub1 == sub2)
write.csv(sub1, "sub1.csv")
# This is options to make pdf file. You should ignore
library(here)
knitr::opts_chunk$set(
message = FALSE,
warning = FALSE,
echo = TRUE,
cache = FALSE,
fig.pos = "h")
## 基本統計量
stargazer(data, type = "text")
# This is options to make pdf file. You should ignore
library(here)
knitr::opts_chunk$set(
message = FALSE,
warning = FALSE,
echo = TRUE,
cache = FALSE,
fig.pos = "h")
lm<-lm_robust(income ~ yeduc, data = data, se_type = "stata")
library(estimatr)
lm<-lm_robust(income ~ yeduc, data = data, se_type = "stata")
mydata <- read.csv("5_1_income.csv")
lm<-lm_robust(income ~ yeduc, data = data, se_type = "stata")
lm<-lm_robust(income ~ yeduc, data = mydata, se_type = "stata")
lm
## 均一分散を想定した回帰分析の実行
lm.classical<-lm_robust(income ~ yeduc, data = mydata, se_type = "classical")
lm.classical
## データを読み込み
df <- read.csv("transfer.csv")
## 人口(pop82)、平均教育年数(educ91)で貧困率(poverty91)を回帰
poverty <- lm(poverty91 ~ pop82 + educ91, data = df)
poverty
## データとestimaterパッケージの読み込み(ここではブラジルの市町村ごとの貧困率と教育年数)
poverty <- read.csv("transfer.csv")
## データの確認
head(poverty)
## 回帰分析の実行
lm.cluster<-lm_robust( poverty91~ educ91, data = poverty,
cluster = state, se_type = "stata")
lm.cluster
## stargazerパッケージの読み込み
library(stargazer)
## 回帰分析の実行
lm.robust <- lm_robust( poverty91~ educ91, data = poverty, se_type = "stata")
lm.classical <- lm_robust( poverty91~ educ91, data = poverty, se_type = "classical")
stargazer(lm.cluster, lm.robust, lm.classical, type = "text")
## stargazerパッケージの読み込み
library(stargazer)
## 回帰分析の実行
lm.robust <- lm_robust( poverty91~ educ91, data = poverty, se_type = "stata")
lm.classical <- lm_robust( poverty91~ educ91, data = poverty, se_type = "classical")
stargazer(lm.cluster, lm.robust, lm.classical, type = "text")
## クラスターロバストな標準誤差を用いた回帰分析の実行
lm.cluster <- lm_robust( poverty91~ educ91, data = poverty,
cluster = state, se_type = "stata")
stargazer(lm.cluster, lm.robust, lm.classical, type = "text")
stargazer(lm.cluster, lm.robust, lm.classical, type = "text")
## stargazerパッケージの読み込み
library(lm.cluster)
## stargazerパッケージの読み込み
library(xtable)
xtable(lm.cluster, lm.robust, lm.classical, type = "text")
lm.robust
lm.classical <- lm_robust( poverty91~ educ91, data = poverty, se_type = "classical")
lm.classical
vif(lm.classical)
## lm()関数を用いて分析
lm.classical <- lm(poverty91~ educ91, data = poverty)
## vifを確認
vif(lm.classical) #lm_robust()関数の結果は受け付けない。
library(car)
install.packages("car")
## lm()関数を用いて分析
lm.classical <- lm(poverty91~ educ91, data = poverty)
## vifを確認
vif(lm.classical) #lm_robust()関数の結果は受け付けない。
library(car)
## vifを確認
vif(lm.classical) #lm_robust()関数の結果は受け付けない。
## lm()関数を用いて分析
lm.classical <- lm(poverty91~ educ91 + literature91 + pop82, data = poverty)
## lm()関数を用いて分析
lm.classical <- lm(poverty91~ educ91 + literate91 + pop82, data = poverty)
## vifを確認
vif(lm.classical) #lm_robust()関数の結果は受け付けない。
## lm()関数を用いて分析
lm.classical <- lm_robust(poverty91~ educ91 + literate91 + pop82, data = poverty)
## vifを確認
vif(lm.classical) #lm_robust()関数の結果は受け付けない。
## lm()関数を用いて分析
lm.classical <- lm_robust(poverty91 ~ educ91 + literate91 + pop82, data = poverty)
## vifを確認
vif(lm.classical) #lm_robust()関数の結果は受け付けない。
## lm()関数を用いて分析
lm.classical <- lm(poverty91 ~ educ91 + literate91 + pop82, data = poverty)
## vifを確認
vif(lm.classical) #lm_robust()関数の結果は受け付けない。
# This is options to make pdf file. You should ignore
library(here)
knitr::opts_chunk$set(
message = FALSE,
warning = FALSE,
echo = TRUE,
cache = FALSE,
fig.pos = "h")
## 市町村ごとの平均教育年数と人口規模の相関を確認
cor(poverty$educ91, poverty$pop82)
## データを読み込み
poverty <- read.csv("transfer.csv")
# This is options to make pdf file. You should ignore
library(here)
knitr::opts_chunk$set(
message = FALSE,
warning = FALSE,
echo = TRUE,
cache = FALSE,
fig.pos = "h")
## データを読み込み
mydata <- read.csv("ipehd_qje2009_master.csv")
head(mydata)
## パッケージをインストール
library(estimatr)
## 操作変数を用いない通常の回帰分析を行う
ols1 <- lm_robust(f_rw ~ f_prot, data = mydata, se_type = "stata")
ols1
## 操作変数法を用いる。
iv1 <- iv_robust(f_rw ~ f_prot | kmwittenberg, data = mydata, se_type = "stata")
iv1
## 操作変数法を用いる。
iv1 <- iv_robust(f_rw ~ f_prot | kmwittenberg, data = mydata,
se_type = "stata", diagnostics = TRUE)
iv1
## 第1段階でのF値
iv1[["firststage_fstatistic"]]
## 操作変数法を用いる。
iv1 <- iv_robust(f_rw ~ f_prot | kmwittenberg, data = mydata, se_type = "stata")
iv1
## 第1段階でのF値
iv1[["firststage_fstatistic"]]
tidy(iv1, model = "first_stage")
tidy(iv1)
tidy(iv1, model = "firststage_fstatistic")
tidy(iv1, "firststage_fstatistic")
iv1
iv1[]
install.packages("estimater")
## パッケージをインストール
library(estimatr)
## 操作変数法を用いる。
iv1 <- iv_robust(f_rw ~ f_prot | kmwittenberg, data = mydata, se_type = "stata")
iv1[]
iv1[]$firststage_fstatistic
iv1$firststage_fstatistic
extract.iv_robust(iv1)
install.packages("texreg")
## パッケージをインストール
library(estimatr,texreg)
extract.iv_robust(iv1)
## 操作変数法を用いる。
iv1 <- iv_robust(f_rw ~ f_prot | kmwittenberg, data = mydata, se_type = "stata",
diagnostics = TRUE)
iv1$firststage_fstatistic
iv1[]
iv1$diagnostic_first_stage_fstatistic
tlmgr install lm
kpsewhich IPAMincho/OT.mf.
#'
#+ library and wd
library(rmarkdown)
library(bookdown)
library(Statamarkdown)
options(repo = "https://cran.rstudio.com/")
options(bookdown.render.file_scope = FALSE)
# pdf (slides)
bookdown::render_book(
input = "index.rmd",
output_format = "bookdown::pdf_book",
output_file = "Paper.pdf",
output_dir = "report",
clean = TRUE,
encoding = "utf8"
)
# pdf (paper)
bookdown::render_book(
input = "index.rmd",
output_format = "bookdown::pdf_document2",
output_file = "draft.pdf",
output_dir = "paper",
clean = TRUE,
encoding = "utf8"
)
# pdf (paper)
bookdown::render_book(
input = "index.rmd",
output_format = "bookdown::pdf_document2",
output_file = "draft.pdf",
output_dir = "paper",
clean = TRUE,
encoding = "utf8"
)
setwd("~/Korea")
# pdf (paper)
bookdown::render_book(
input = "index.rmd",
output_format = "bookdown::pdf_document2",
output_file = "draft.pdf",
output_dir = "paper",
clean = TRUE,
encoding = "utf8"
)
# pdf (paper)
bookdown::render_book(
input = "index.rmd",
output_format = "bookdown::pdf_document2",
output_file = "draft.pdf",
output_dir = "paper",
clean = TRUE,
encoding = "utf8"
)
# pdf (paper)
bookdown::render_book(
input = "index.rmd",
output_format = "bookdown::pdf_document2",
output_file = "draft.pdf",
output_dir = "paper",
clean = TRUE,
encoding = "utf8"
)
# pdf (paper)
bookdown::render_book(
input = "index.rmd",
output_format = "bookdown::pdf_document2",
output_file = "draft.pdf",
output_dir = "paper",
clean = TRUE,
encoding = "utf8"
)
# pdf (paper)
bookdown::render_book(
input = "index.rmd",
output_format = "bookdown::pdf_document2",
output_file = "draft.pdf",
output_dir = "paper",
clean = TRUE,
encoding = "utf8"
)
# preview chapter
bookdown::preview_chapter(
"manuscript/1_intro.Rmd",
"bookdown::pdf_document2",
output_dir = "paper",
output_file = "chapter1.pdf"
)
# preview chapter
bookdown::preview_chapter(
"manuscript/1_intro.Rmd",
"bookdown::pdf_document2",
output_dir = "paper",
output_file = "chapter1.pdf"
)
# preview chapter
bookdown::preview_chapter(
input = "manuscript/1_intro.Rmd",
output_format = "bookdown::pdf_document2",
output_dir = "paper",
output_file = "chapter1.pdf"
)
# preview chapter
bookdown::preview_chapter(
input = "manuscript/1_intro.Rmd",
output_format = "bookdown::pdf_document2",
output_dir = "paper",
output_file = "chapter1.pdf"
)
# pdf (paper)
bookdown::render_book(
input = "index.rmd",
output_format = "bookdown::pdf_document2",
output_file = "draft.pdf",
output_dir = "paper",
clean = TRUE,
encoding = "utf8"
)
# pdf (paper)
bookdown::render_book(
input = "index.rmd",
output_format = "bookdown::pdf_document2",
output_file = "draft.pdf",
output_dir = "paper",
clean = TRUE,
encoding = "utf8"
)
# pdf (paper)
bookdown::render_book(
input = "index.rmd",
output_format = "bookdown::pdf_document2",
output_file = "draft.pdf",
output_dir = "paper",
clean = TRUE,
encoding = "utf8"
)
# pdf (paper)
bookdown::render_book(
input = "index.rmd",
output_format = "bookdown::pdf_document2",
output_file = "draft.pdf",
output_dir = "paper",
clean = TRUE,
encoding = "utf8"
)
# pdf (paper)
bookdown::render_book(
input = "index.rmd",
output_format = "bookdown::pdf_document2",
output_file = "draft.pdf",
output_dir = "paper",
clean = TRUE,
encoding = "utf8"
)
# pdf (paper)
bookdown::render_book(
input = "index.rmd",
output_format = "bookdown::pdf_document2",
output_file = "draft.pdf",
output_dir = "paper",
clean = TRUE,
encoding = "utf8"
)
# pdf (paper)
bookdown::render_book(
input = "index.rmd",
output_format = "bookdown::pdf_document2",
output_file = "draft.pdf",
output_dir = "paper",
clean = TRUE,
encoding = "utf8"
)
# pdf (paper)
bookdown::render_book(
input = "index.rmd",
output_format = "bookdown::pdf_document2",
output_file = "draft.pdf",
output_dir = "paper",
clean = TRUE,
encoding = "utf8"
)
# pdf (paper)
bookdown::render_book(
input = "index.rmd",
output_format = "bookdown::pdf_document2",
output_file = "draft.pdf",
output_dir = "paper",
clean = TRUE,
encoding = "utf8"
)
# pdf (paper)
bookdown::render_book(
input = "index.rmd",
output_format = "bookdown::pdf_document2",
output_file = "draft.pdf",
output_dir = "paper",
clean = TRUE,
encoding = "utf8"
)
# pdf (paper)
bookdown::render_book(
input = "index.rmd",
output_format = "bookdown::pdf_document2",
output_file = "draft.pdf",
output_dir = "paper",
clean = TRUE,
encoding = "utf8"
)
# pdf (paper)
bookdown::render_book(
input = "index.rmd",
output_format = "bookdown::pdf_document2",
output_file = "draft.pdf",
output_dir = "paper",
clean = TRUE,
encoding = "utf8"
)
# pdf (paper)
bookdown::render_book(
input = "index.rmd",
output_format = "bookdown::pdf_document2",
output_file = "draft.pdf",
output_dir = "paper",
clean = TRUE,
encoding = "utf8"
)
# pdf (paper)
bookdown::render_book(
input = "index.rmd",
output_format = "bookdown::pdf_document2",
output_file = "draft.pdf",
output_dir = "paper",
clean = TRUE,
encoding = "utf8"
)
