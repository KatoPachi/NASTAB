plot(Year, ideal.US, col = "blue", type ="l", xlab = "Year", ylab = "理想点",
ylim = c(min(ideal.RU), max(ideal.US)))
lines(Year, ideal.RU, col = "red")
lines(Year, tapply(UN$idealpoint, UN$Year, median))
text(1950, 2.5, "アメリカ")
text(1950, -2, "ソ連・ロシア")
text(1950, 0, "全世界での中央値")
## Make a list of former-USSR countries
Former.USSR <- c("Armenia", "Azerbaijan", "Estonia", "Georgia", "Kazakhstan", "Kyrgyzstan",
"Latvia", "Lithuania", "Moldova", "Slovenia", "Tajikistan", "Turkmenistan",
"Uzbekistan", "Ukraine", "Russia")
UN.2012 <- UN[UN$Year == 2012,]
UN.2012$USSR <- ifelse(UN.2012$)
UN.2012$USSR <- ifelse(UN.2012$CountryName %in% Former.USSR, 1, 0)
UN.2012$USSR
## Make a list of former-USSR countries
Former.USSR <- c("Armenia", "Azerbaijan", "Estonia", "Georgia", "Kazakhstan",
"Kyrgyzstan", "Latvia", "Lithuania", "Moldova", "Slovenia",
"Tajikistan", "Turkmenistan","Uzbekistan", "Ukraine", "Russia")
UN$USSR <- ifelse(UN$CountryName %in% Former.USSR, 1, 0)
UN$idealpoint[UN$USSR == 1][UN$Year == 2012]
x <- UN$idealpoint[UN$USSR == 1]
x <- UN[UN$USSR == 1,]
x$idealpoint[UN$Year == 2012]
View(UN)
View(x)
class(x$Year)
x$idealpoint[x$Year == 2012]
## Make a subset for 2012
x <- cbind(UN$idealpoint[UN$Year == 2012], UN$PctAgreeUS[UN$Year == 2012])
plot(x, col = UN$USSR[UN$Year == 2012],
xlab = "理想点", ylab = "アメリカとの一致度")
plot(x, col = UN$USSR[UN$Year == 2012]+1,
xlab = "理想点", ylab = "アメリカとの一致度")
plot(x, col = UN$USSR[UN$Year == 2012]+2,
xlab = "理想点", ylab = "アメリカとの一致度")
plot(Year, UN$idealpoint[UN$USSR == 0], col = "blue", type ="l",
xlab = "Year", ylab = "理想点")
plot(Year, tapply(UN$idealpoint[UN$USSR == 1], UN$Year, median),
col = "blue", type ="l",
xlab = "Year", ylab = "理想点")
plot(Year, tapply(UN$idealpoint[UN$USSR == 0], UN$Year[UN$USSR == 0], median),
col = "blue", type ="l",
xlab = "Year", ylab = "理想点")
lines(Year, tapply(UN$idealpoint[UN$USSR == 1], UN$Year[UN$USSR == 1], median))
UN$idealpoint[UN$Year == 2012][UN$USSR == 1]
UN$idealpoint[UN$Year == 2012,UN$USSR == 1]
UN.2012 <- UN[UN$Year == 2012,]
UN.1989 <- UN[UN$Year == 1989,]
## Make k-means clusers
x.out <- kmeans(x, centers = 2)
y.out <- kmeans(y, centers = 2)
## Make a subset for 1989
y <- cbind(UN$idealpoint[UN$Year == 1989], UN$PctAgreeUS[UN$Year == 1989])
y.out <- kmeans(y, centers = 2)
## Make k-means clusers
x.out <- kmeans(x, centers = 2, nstart =0)
tinytex::tlmgr_install("ipaex")
knitr::opts_chunk$set(dev = "cairo_pdf", dev.args = list(family = "ipaexg"))
income <- read.csv("5_1_income.csv")
plot(income$yeduc, income$lincome, main = "教育年数と収入の関係",
xlab = "教育年数", ylab = "収入の対数値")
plot(income$yeduc, income$income, main = "教育年数と収入の関係",
xlab = "教育年数", ylab = "収入")
plot(income$yeduc, income$lincome, main = "教育年数と収入の関係",
xlab = "教育年数", ylab = "収入の対数値")
plot(income$yeduc, income$income, main = "教育年数と収入の関係",
xlab = "教育年数", ylab = "収入")
head(income)
head(income)[-3:-4,]
head(income)[,-3:-4]
```{r, include=FALSE}
head(income)[,-3:-4]
head(income)
library(maps)
elec <- read.csv("elections.csv")
elec$Dem <- elec$dem / (elec$dem + elec$rep)
elec$Rep <- elec$rep / (elec$dem + elec$rep)
elec$col <- rgb(red = elec$Rep, blue = elec$Dem, green = 0)
elec$sc <- paste(elec$state, elec$county, sep = ",") #paste関数は教科書には出てこない。Webで調べてみること。
state <- unique(elec$state)
state
elec2008 <- elec[elec$year == 2008, ]
map(database = "state", region = "massachusetts")
map(database = "county",
region = elec2008$sc[elec2008$state == "massachusetts"],
col = elec2008$col[elec2008$state == "massachusetts"],
fill = TRUE, add = TRUE)
map(database = "state", region = "arizona")
map(database = "county",
region = elec2008$sc[elec2008$state == "arizona"],
col = elec2008$col[elec2008$state == "arizona"],
fill = TRUE, add = TRUE)
for(i in 1:length(state)){
map(database = "state", region = state[i])
map(database = "county",
region = elec2008$sc[elec2008$state == state[i]],
col = elec2008$col[elec2008$state == state[i]],
fill = TRUE, add = TRUE)
title(state[i])
}
map(database = "state")
for(i in 1:length(state)){
map(database = "county",
region = elec2008$sc[elec2008$state == state[i]],
col = elec2008$col[elec2008$state == state[i]],
fill = TRUE, add = TRUE)
}
title("Presidential election in 2008")
library("animation")
years <- unique(elec$year)
elecmap <- function(Year){
map(database = "state")
for(i in 1:length(state)){
election <- elec[elec$year == Year,]
map(database = "county",
region = election$sc[election$state == state[i]],
col = election$col[election$state == state[i]],
fill = TRUE, add = TRUE)
title(j)
}
}
saveHTML({
for (j in years){
elecmap(j)}
}, htmlfile = "president.html", outdir = getwd(), autobrouwse = FALSE
)
st.Dem <-tapply(elec2008$dem, elec2008$state, sum)/(tapply(elec2008$dem, elec2008$state, sum) +
tapply(elec2008$rep, elec2008$state, sum))
st.Rep <-tapply(elec2008$rep, elec2008$state, sum)/(tapply(elec2008$dem, elec2008$state, sum) +
tapply(elec2008$rep, elec2008$state, sum))
for (i in 1:length(state)){
elec2008$st.Dem[elec2008$state == names(st.Dem)[i]] <- st.Dem[i]
elec2008$st.Rep[elec2008$state == names(st.Rep)[i]] <- st.Rep[i]
}
elec2008$abs <- abs((elec2008$Dem/elec2008$st.Dem) - (elec2008$Rep/elec2008$st.Rep))
dissimilar <- (1/2) * tapply(elec2008$abs, elec2008$state, sum)
dissimilarity <- dissimilar/max(dissimilar)
map(database = "state")
for(i in 1:length(state)){
map(database = "state",
region = names(dissimilar[i]),
col = rgb(red = 1, blue = 1, green = (1-dissimilarity[i])),
fill = TRUE, add = TRUE)
}
install.packages("ineq")
library(ineq)
?ineq
gini <- rep(NA, length(state))
for(i in 1:length(state)){
gini.vec <- elec2008$Dem[elec2008$state == state[i]]
gini.state <- ineq(gini.vec, type = "Gini")
gini[i] <- gini.state
names(gini[i]) <- names(state[i])
map(database = "state",
region = names(gini[i]),
col = rgb(red = 1, blue = 1, green = (1-gini[i])),
fill = TRUE, add = TRUE)
}
gini <- rep(NA, length(state))
for(i in 1:length(state)){
gini.vec <- elec2008$Dem[elec2008$state == state[i]]
gini.state <- ineq(gini.vec, type = "Gini")
gini[i] <- gini.state
}
map(database = "state")
for(i in 1:length(state){
map(database = "state")
for(i in 1:length(state){
gini
gini[i]
for(i in 1:length(state)){
gini.vec <- elec2008$Dem[elec2008$state == state[i]]
gini.state <- ineq(gini.vec, type = "Gini")
gini[i] <- gini.state
names(gini[i]) <- state[i]
}
gini[i]
names(gini[i])
state <- unique(elec$state)
state
for(i in 1:length(state)){
gini.vec <- elec2008$Dem[elec2008$state == state[i]]
gini.state <- ineq(gini.vec, type = "Gini")
gini[i] <- gini.state
names(gini[i]) <- state[i]
}
names(gini[i])
(計算スペース)
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
(計算スペース)
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
# This is options to make pdf file. You should ignore
library(here)
knitr::opts_chunk$set(
message = FALSE,
warning = FALSE,
echo = TRUE,
cache = FALSE,
fig.pos = "h")
## データの読み込み
data <- read.csv("5_1_income.csv")
## データの一部から変数などを確認する
head(data)
## incomeの対数値をlogincomeという変数としてデータフレームに加える。
data$logincome <- log(data$income)
## logincomeとlincomeが等しいかを調べる。
data$logincome == data$lincome
## incomeの対数値をlogincomeという変数としてデータフレームに加える。
data$logyeduc <- log(data$yeduc)
## logincomeとlincomeが等しいかを調べる。
data$logyeduc == data$lyeduc
View(data)
## lyeducの指数をとった値をeducという変数としてデータフレームに加える。
data$educ <- exp(data$lyeduc)
head(data$educ)
##
head(c(data$educ,data$yeduc))
##
head(data$yeduc)
head(data$educ)
## 1つ目はyeducの値が9となる行だけ取り出すというやり方
sub1 <- data[data$yeduc == 9,]
## 2つ目はsubsetという関数を使うやり方
sub2 <- subset(data, subset = (yeduc == 9))
## 1つ目はyeducの値が11となる行だけ取り出すというやり方
sub1 <- data[data$yeduc == 11,]
## 2つ目はsubsetという関数を使うやり方
sub2 <- subset(data, subset = (yeduc == 11))
## 結果を確認
head(sub1)
head(sub2)
## 1 + 2と3は等しいだろうか。
1 + 2 == 3
## 1 + 1と3は異なるものだろうか。
1 + 1 != 3
## 1より2は大きいだろうか。また3は1以上(以下)だろうか。
1 < 2
3 >= 1
3 <= 1
## sub1とsub2は等しいだろうか
sub1 == sub2
sub1 = sub2
sub1 = sub2
## sub1とsub2の各要素は等しいだろうか
head(sub1 == sub2)
write.csv(sub1, "sub1.csv")
# This is options to make pdf file. You should ignore
library(here)
knitr::opts_chunk$set(
message = FALSE,
warning = FALSE,
echo = TRUE,
cache = FALSE,
fig.pos = "h")
## 基本統計量
stargazer(data, type = "text")
# This is options to make pdf file. You should ignore
library(here)
knitr::opts_chunk$set(
message = FALSE,
warning = FALSE,
echo = TRUE,
cache = FALSE,
fig.pos = "h")
lm<-lm_robust(income ~ yeduc, data = data, se_type = "stata")
library(estimatr)
lm<-lm_robust(income ~ yeduc, data = data, se_type = "stata")
mydata <- read.csv("5_1_income.csv")
lm<-lm_robust(income ~ yeduc, data = data, se_type = "stata")
lm<-lm_robust(income ~ yeduc, data = mydata, se_type = "stata")
lm
## 均一分散を想定した回帰分析の実行
lm.classical<-lm_robust(income ~ yeduc, data = mydata, se_type = "classical")
lm.classical
## データを読み込み
df <- read.csv("transfer.csv")
## 人口(pop82)、平均教育年数(educ91)で貧困率(poverty91)を回帰
poverty <- lm(poverty91 ~ pop82 + educ91, data = df)
poverty
## データとestimaterパッケージの読み込み(ここではブラジルの市町村ごとの貧困率と教育年数)
poverty <- read.csv("transfer.csv")
## データの確認
head(poverty)
## 回帰分析の実行
lm.cluster<-lm_robust( poverty91~ educ91, data = poverty,
cluster = state, se_type = "stata")
lm.cluster
## stargazerパッケージの読み込み
library(stargazer)
## 回帰分析の実行
lm.robust <- lm_robust( poverty91~ educ91, data = poverty, se_type = "stata")
lm.classical <- lm_robust( poverty91~ educ91, data = poverty, se_type = "classical")
stargazer(lm.cluster, lm.robust, lm.classical, type = "text")
## stargazerパッケージの読み込み
library(stargazer)
## 回帰分析の実行
lm.robust <- lm_robust( poverty91~ educ91, data = poverty, se_type = "stata")
lm.classical <- lm_robust( poverty91~ educ91, data = poverty, se_type = "classical")
stargazer(lm.cluster, lm.robust, lm.classical, type = "text")
## クラスターロバストな標準誤差を用いた回帰分析の実行
lm.cluster <- lm_robust( poverty91~ educ91, data = poverty,
cluster = state, se_type = "stata")
stargazer(lm.cluster, lm.robust, lm.classical, type = "text")
stargazer(lm.cluster, lm.robust, lm.classical, type = "text")
## stargazerパッケージの読み込み
library(lm.cluster)
## stargazerパッケージの読み込み
library(xtable)
xtable(lm.cluster, lm.robust, lm.classical, type = "text")
lm.robust
lm.classical <- lm_robust( poverty91~ educ91, data = poverty, se_type = "classical")
lm.classical
vif(lm.classical)
## lm()関数を用いて分析
lm.classical <- lm(poverty91~ educ91, data = poverty)
## vifを確認
vif(lm.classical) #lm_robust()関数の結果は受け付けない。
library(car)
install.packages("car")
## lm()関数を用いて分析
lm.classical <- lm(poverty91~ educ91, data = poverty)
## vifを確認
vif(lm.classical) #lm_robust()関数の結果は受け付けない。
library(car)
## vifを確認
vif(lm.classical) #lm_robust()関数の結果は受け付けない。
## lm()関数を用いて分析
lm.classical <- lm(poverty91~ educ91 + literature91 + pop82, data = poverty)
## lm()関数を用いて分析
lm.classical <- lm(poverty91~ educ91 + literate91 + pop82, data = poverty)
## vifを確認
vif(lm.classical) #lm_robust()関数の結果は受け付けない。
## lm()関数を用いて分析
lm.classical <- lm_robust(poverty91~ educ91 + literate91 + pop82, data = poverty)
## vifを確認
vif(lm.classical) #lm_robust()関数の結果は受け付けない。
## lm()関数を用いて分析
lm.classical <- lm_robust(poverty91 ~ educ91 + literate91 + pop82, data = poverty)
## vifを確認
vif(lm.classical) #lm_robust()関数の結果は受け付けない。
## lm()関数を用いて分析
lm.classical <- lm(poverty91 ~ educ91 + literate91 + pop82, data = poverty)
## vifを確認
vif(lm.classical) #lm_robust()関数の結果は受け付けない。
# This is options to make pdf file. You should ignore
library(here)
knitr::opts_chunk$set(
message = FALSE,
warning = FALSE,
echo = TRUE,
cache = FALSE,
fig.pos = "h")
## 市町村ごとの平均教育年数と人口規模の相関を確認
cor(poverty$educ91, poverty$pop82)
## データを読み込み
poverty <- read.csv("transfer.csv")
# This is options to make pdf file. You should ignore
library(here)
knitr::opts_chunk$set(
message = FALSE,
warning = FALSE,
echo = TRUE,
cache = FALSE,
fig.pos = "h")
## データを読み込み
mydata <- read.csv("ipehd_qje2009_master.csv")
head(mydata)
## パッケージをインストール
library(estimatr)
## 操作変数を用いない通常の回帰分析を行う
ols1 <- lm_robust(f_rw ~ f_prot, data = mydata, se_type = "stata")
ols1
## 操作変数法を用いる。
iv1 <- iv_robust(f_rw ~ f_prot | kmwittenberg, data = mydata, se_type = "stata")
iv1
## 操作変数法を用いる。
iv1 <- iv_robust(f_rw ~ f_prot | kmwittenberg, data = mydata,
se_type = "stata", diagnostics = TRUE)
iv1
## 第1段階でのF値
iv1[["firststage_fstatistic"]]
## 操作変数法を用いる。
iv1 <- iv_robust(f_rw ~ f_prot | kmwittenberg, data = mydata, se_type = "stata")
iv1
## 第1段階でのF値
iv1[["firststage_fstatistic"]]
tidy(iv1, model = "first_stage")
tidy(iv1)
tidy(iv1, model = "firststage_fstatistic")
tidy(iv1, "firststage_fstatistic")
iv1
iv1[]
install.packages("estimater")
## パッケージをインストール
library(estimatr)
## 操作変数法を用いる。
iv1 <- iv_robust(f_rw ~ f_prot | kmwittenberg, data = mydata, se_type = "stata")
iv1[]
iv1[]$firststage_fstatistic
iv1$firststage_fstatistic
extract.iv_robust(iv1)
install.packages("texreg")
## パッケージをインストール
library(estimatr,texreg)
extract.iv_robust(iv1)
## 操作変数法を用いる。
iv1 <- iv_robust(f_rw ~ f_prot | kmwittenberg, data = mydata, se_type = "stata",
diagnostics = TRUE)
iv1$firststage_fstatistic
iv1[]
iv1$diagnostic_first_stage_fstatistic
setwd("~/Korea")
install.packages("readstata13")
library(devtools) # before this you may need to install devtools
install_github("hemken/Statamarkdown")
install.packages("devtools")
library(devtools) # before this you may need to install devtools
install_github("hemken/Statamarkdown")
help(package="Statamarkdown")
update.packages(ask = FALSE, checkBuilt = TRUE)
tinytex::tlmgr_update()
install.packages("rlang")
options(tinytex.verbose = TRUE)
options(tinytex.verbose = TRUE)
# pdf
bookdown::render_book(
input = "index.rmd",
output_format = "bookdown::pdf_book",
output_file = "slides.pdf",
output_dir = "report",
clean = TRUE,
encoding = "utf8"
)
# pdf
bookdown::render_book(
input = "index.rmd",
output_format = "bookdown::pdf_book",
output_file = "Paper.pdf",
output_dir = "report",
clean = TRUE,
encoding = "utf8"
)
#'
#+ library and wd
library(rmarkdown)
library(bookdown)
library(Statamarkdown)
options(repo = "https://cran.rstudio.com/")
options(bookdown.render.file_scope = FALSE)
# pdf
bookdown::render_book(
input = "index.rmd",
output_format = "bookdown::pdf_book",
output_file = "Paper.pdf",
output_dir = "report",
clean = TRUE,
encoding = "utf8"
)
# pdf
bookdown::render_book(
input = "index.rmd",
output_format = "bookdown::pdf_book",
output_file = "Paper.pdf",
output_dir = "report",
clean = TRUE,
encoding = "utf8"
)
# pdf
bookdown::render_book(
input = "index.rmd",
output_format = "bookdown::pdf_book",
output_file = "Paper.pdf",
output_dir = "report",
clean = TRUE,
encoding = "utf8"
)
#'
#+ library and wd
library(rmarkdown)
library(bookdown)
library(Statamarkdown)
options(repo = "https://cran.rstudio.com/")
options(bookdown.render.file_scope = FALSE)
# pdf
bookdown::render_book(
input = "index.rmd",
output_format = "bookdown::pdf_book",
output_file = "Paper.pdf",
output_dir = "report",
clean = TRUE,
encoding = "utf8"
)
